#version 450

#extension GL_EXT_debug_printf : enable

layout (local_size_x = 32) in;

layout(push_constant) uniform CFDPushConstants {
    int gridSize;
    int shouldRed;
} cfdPushConstants;

int shouldRed = cfdPushConstants.shouldRed;
int gridSize = cfdPushConstants.gridSize;

layout(binding = 0) buffer velXBuff { float vel_x[]; };
layout(binding = 1) buffer velYBuff { float vel_y[]; };
layout(binding = 2) buffer velZBuff { float vel_z[]; };
layout(binding = 3) buffer densityBuff { float density[]; };
layout(binding = 4) buffer pressureBuff { float pressure[]; };
layout(binding = 5) buffer sourceBuff { float source[]; };

layout(binding = 6) buffer velXBuff2 { float vel_x2[]; };
layout(binding = 7) buffer velYBuff2 { float vel_y2[]; };
layout(binding = 8) buffer velZBuff2 { float vel_z2[]; };
layout(binding = 9) buffer density2Buff { float density2[]; };
layout(binding = 10) buffer pressure2Buff { float pressure2[]; };
layout(binding = 11) buffer source2Buff { float source2[]; };

layout(binding = 12) buffer boundariesBuff { float b[]; };

layout(binding = 13, rgba32f) writeonly uniform image3D outputTexture;

// const int gridSize = 129;
const float dx = 1.0;
const float dt = 0.1;
const int dim = 3;
// const float overRelaxation = 1.9;
const float overRelaxation = 1.4;

vec3 get_grid_position(uint index) {
    uint x = index % gridSize;
    uint y = (index / gridSize) % gridSize;
    uint z = index / (gridSize * gridSize);
    return vec3(float(x), float(y), float(z));
}

int get_grid_index(ivec3 pos) {
    return pos.x + pos.y * gridSize + pos.z * gridSize * gridSize;
}

int get_grid_index_boundary(ivec3 pos, int mGridSize) {
    return pos.x + pos.y * mGridSize + pos.z * mGridSize * mGridSize;
}

int get_x_vel_index(ivec3 pos) {
    return pos.x + pos.y * (gridSize+1) + pos.z * (gridSize+1) * gridSize;
}
int get_y_vel_index(ivec3 pos) {
    return pos.x + pos.y * gridSize + pos.z * (gridSize+1) * gridSize;
}
int get_z_vel_index(ivec3 pos) {
    return pos.x + pos.y * gridSize + pos.z * gridSize * gridSize;
}

int is_red(uint index) {
    return int(index % 2);
}

bool is_inside(ivec3 p) {
    return all(greaterThanEqual(p, ivec3(0))) &&
           all(lessThan(p, ivec3(gridSize)));
}

bool is_solid(ivec3 p) {
    if (!is_inside(p)) return true; // ghost = solid
    return b[get_grid_index(p)] > 0.5;
}

void gauss_siedel(uint gridIndex) {
    vec3 pos = get_grid_position(gridIndex);
    ivec3 p = ivec3(floor(pos)); // base grid coord
    ivec3 p_boundary = p + ivec3(1); // shifted for boundary grid

    p = clamp(p, 0, gridSize - 1); // just to be safe
    p_boundary = clamp(p_boundary, 1, gridSize); // boundary grid limits

    float vx0 = vel_x[get_x_vel_index(p)];
    float vx1 = vel_x[get_x_vel_index(ivec3(p.x+1, p.y, p.z))];

    float vy0 = vel_y[get_y_vel_index(p)];
    float vy1 = vel_y[get_y_vel_index(ivec3(p.x, p.y+1, p.z))];

    float vz0 = vel_z[get_z_vel_index(p)];
    float vz1 = vel_z[get_z_vel_index(ivec3(p.x, p.y, p.z+1))];

    float div = overRelaxation*((vx1 - vx0) + (vy1 - vy0) + (vz1 - vz0));

    // Look at neighboring boundary cells:
    float b100  = b[get_grid_index_boundary(p_boundary + ivec3( 1, 0, 0), gridSize+2)];
    float bm100 = b[get_grid_index_boundary(p_boundary + ivec3(-1, 0, 0), gridSize+2)];
    float b010  = b[get_grid_index_boundary(p_boundary + ivec3( 0, 1, 0), gridSize+2)];
    float bm010 = b[get_grid_index_boundary(p_boundary + ivec3( 0,-1, 0), gridSize+2)];
    float b001  = b[get_grid_index_boundary(p_boundary + ivec3( 0, 0, 1), gridSize+2)];
    float bm001 = b[get_grid_index_boundary(p_boundary + ivec3( 0, 0,-1), gridSize+2)];

    float boundCoeff = b100 + bm100 + b010 + bm010 + b001 + bm001;

    if (boundCoeff == 0.0) {
        return;
    }

    vel_x[get_x_vel_index(p)] = vx0 + bm100*div/boundCoeff;
    vel_x[get_x_vel_index(ivec3(p.x+1, p.y, p.z))] = vx1 - b100*div/boundCoeff;

    vel_y[get_y_vel_index(p)] = vy0 + bm010*div/boundCoeff;
    vel_y[get_y_vel_index(ivec3(p.x, p.y+1, p.z))] = vy1 - b010*div/boundCoeff;

    vel_z[get_z_vel_index(p)] = vz0 + bm001*div/boundCoeff;
    vel_z[get_z_vel_index(ivec3(p.x, p.y, p.z+1))] = vz1 - b001*div/boundCoeff;
}

void main() {
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= (gridSize) * gridSize * gridSize) {
        return;
    }

    if (is_red(idx) == shouldRed) {
        return;
    }

    gauss_siedel(idx);

    return;
}